/**
 * AJAX star rating plugin for CakePHP 1.2
 *
 * This plugin offers you an easy and customizable way to 
 * enable your users to rate any of your CakePHP models 
 * over a star rating element.
 * 
 * The star images in rating\vendors\img are from 
 * Yusuke Kamiyamane (http://www.pinvoke.com/)
 *
 * @author Michael Schneidt <michael.schneidt@arcor.de>
 * @copyright Copyright 2009, Michael Schneidt
 * @license http://www.opensource.org/licenses/mit-license.php
 * @link http://bakery.cakephp.org/articles/view/ajax-star-rating-plugin-1
 * @version 2.4
 */

--------------
-- Features --
--------------
# Multi user, multi model rating
# Guest rating
# Just one element to place in your views
# Seamless integration with AJAX
# Prototype and jQuery support
# Cross browser compatibility
# Fallback for disabled javascript
# Various configurations

------------------
-- Requirements --
------------------
# CakePHP 1.2
# Prototype or jQuery javascript framework
# User id stored in session for secure rating

-------------------
-- Demonstration --
-------------------
A demo can be found and downloaded at 
http://ratingdemo.schneimi.spacequadrat.de/

------------
-- Update --
------------
Extract the plugin, including the subfolder 'rating', to your app plugins folder 'app/plugins' and proceed with the according update instructions. 

# v1.9 -> v2.0
1) Update the database ratings table
ALTER TABLE `ratings` CHANGE `created` `created` DATETIME NULL DEFAULT NULL, CHANGE `modified` `modified` DATETIME NULL DEFAULT NULL, CHANGE `user_id` `user_id` char(36) NOT NULL DEFAULT '';
ALTER TABLE ratings ADD KEY `rating` (`model_id`,`model`,`rating`,`name`);

2) Clear the model cache (\app\tmp\cache\models)

3) Add the new settings to the plugin config files in 'app/config'
$config['Rating.guest'] = false;
$config['Rating.guestDuration'] = '1 week';
$config['Rating.saveToModel'] = false;
$config['Rating.modelVotesField'] = 'votes';

# v2.0 -> v2.1
1) Add the new settings to the plugin config files in 'app/config'
$config['Rating.flash'] = false;
$config['Rating.flashMessage'] = __('Your rating has been saved.', true);
$config['Rating.fallback'] = true;
$config['Rating.fallbackFlash'] = false;

# v2.3 -> v2.4
1) change your rating config files in 'app/config' from point notation to underscore notation 
e.g. plugin_rating.php to plugin_rating.php.
2) it's recommended to also to that on the rating element's config parameter in your views, 
although the point notation is still supported.

------------------
-- Installation --
------------------
1) Make sure you meet the requirements above. For the download and integration of a javascript framework, please visit http://www.prototypejs.org/ for Prototype and http://jquery.com/ for jQuery.

2) Extract the plugin, including the subfolder 'rating', to your app plugins folder 'app/plugins'.

3) Copy the 'rating/config/plugin_rating.php' to your app configs folder 'app/config' and change the settings to your desire. It is recommended to let 'Rating.showHelp' set to true until everything works.

4) Apply the 'install.sql' to your database to create the ratings table.

5) Load the plugin javascript and css files in your layout. Replace [your_framework] with 'prototype_min' or 'jquery_min' depending on the framework you use.
<?php echo $javascript->link('/rating/js/[your_framework]'); ?>
<?php echo $html->css('/rating/css/rating'); ?>  

6) For full model integration in your app, apply the following relation to your models. (replace [name_of_your_model])
var $hasMany = array('Rating' => 
                     array('className' => 'Rating',
                           'foreignKey' => 'model_id',
                           'conditions' => array('Rating.model' => [name_of_your_model]),
                           'dependent' => true,
                           'exclusive' => true
               )
);

If you also want to access your user model through the rating model, then add the following relation to 'app\plugins\rating\models\rating.php'.
var $belongsTo = array('User' =>
                       array('className'  => 'User'
                       )
                 );

7) If you set Rating.saveToModel to true, then add the defined Rating.modelAverageField and Rating.modelVotesField to all models you want to rate. To do that you can use the following SQL statements (replace [your_table], [Rating.modelAverageField], [Rating.modelVotesField]). 
ALTER TABLE [your_table] ADD (`[Rating.modelAverageField]` decimal(3,1) unsigned default '0.0');
ALTER TABLE [your_table] ADD (`[Rating.modelVotesField]` int(11) unsigned default '0');

If the plugin shows the field is still missing, try to clear the model cache of your app at 'app/tmp/cache/models'.

8) You can change the styles of the rating element in the css file 'rating/vendors/css/rating.css'.

----------------
-- How to use --
----------------
Now you can place the rating element in your views as follows. (replace [name_of_your_model] and [id_of_your_model])  

// Default rating element for one model id
echo $this->element('rating', array('plugin' => 'rating',
                                    'model' => [name_of_your_model],
                                    'id' => [id_of_your_model]));

// Multiple ratings for one model id
//
// If you want to have more ratings for one model id, like sound and picture of 
// a movie, you can use the additional 'name' parameter.
echo $this->element('rating', array('plugin' => 'rating',
                                    'model' => [name_of_your_model],
                                    'id' => [id_of_your_model],
                                    'name' => 'sound'));

echo $this->element('rating', array('plugin' => 'rating',
                                    'model' => [name_of_your_model],
                                    'id' => [id_of_your_model],
                                    'name' => 'picture'));

// Individual configuration of a rating element
//
// Sometimes you want to use more than one style of rating elements in your app. 
// That can be reached with the 'config' parameter and different config files in 
// 'app/config'. Just clone the original 'plugin_rating.php' and give it a different 
// name like plugin_rating_style1.php, which you then pass to the element.

// uses 'plugin_rating.php' in 'app/config' as default
echo $this->element('rating', array('plugin' => 'rating',
                                    'model' => [name_of_your_model],
                                    'id' => [id_of_your_model]));

// uses 'plugin_rating_style1.php' in 'app/config'
echo $this->element('rating', array('plugin' => 'rating',
                                    'model' => [name_of_your_model],
                                    'id' => [id_of_your_model],
                                    'config' => 'plugin_rating_style1'));